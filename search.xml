<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CentOS6.7下新建XFS文件系统指南]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FCentOS6-7%E4%B8%8B%E6%96%B0%E5%BB%BAXFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[1. 对新磁盘分区 123456789fdisk /dev/vdbnp1回车回车pwfdisk -l 2. 格式化CentOS6.7默认使用EXT4文件系统，需要下载XFS文件系统1yum install -y xfsprogs xfsdump 然后格式化分区mkfs.xfs /dev/vdb1 或者 mkfs -t xfs /dev/vdb1 3. 挂载到目录1mount /dev/vdb1 /data 常见问题错误挂载到根目录后在这两个文件删除相应内容即可/etc/fstab，/etc/mtab]]></content>
      <categories>
        <category>Linux</category>
        <category>XFS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下SVNServer部署手册]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FLinux%E4%B8%8BSVNServer%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[一般来说，subversion服务器可以用两种方式架设： 一种是基于svnserve，svnserve作为服务端 一种是基于Apache，用apache作为服务端 这里以svnserver为例 安装svnserver docker安装 1docker pull garethflowers/svn-server 本地安装 1234[root@localhost ~]# yum -y install subversion[root@localhost ~]# svnserve --versionsvnserve, version 1.7.14 (r1542130) compiled Nov 20 2015, 19:25:09 配置svnserver1. 添加svn管理用户和subversion组（这步很重要，不然会导致authentication failed）12345678910# centos下：sudo adduser svnuser #(添加svnuser用户）sudo groupadd subversion #（添加subversion组）sudo groupadd -G subversion svnuser sudo groupadd -G root subversion #把root用户添加到组里# Ubuntu下：sudo adduser svnuser #(添加svnuser用户）sudo addgroup subversion #（添加subversion组）sudo addgroup svnuser subversion sudo addgroup root subversion #把root用户添加到组里 2. 开始创建项目目录12345mkdir /home/svn #(这里的svn即为版本库目录文件，以后所有的操作都在/home/svn下cd /home/svnmkdir repo #(这里即为一个版本库文件，文件名可以任意取）chown -R root:subversion repochmod -R g+rws repo 3. 创建SVN文件仓库，即为上面建立的repo文件目录1svnadmin create /home/svn/repo 到这一步，安装基本完成，开始改配置。 4. 在/home/svn/repo文件目录中可以看到conf文件夹，可针对conf文件夹中的authz、passwd、svnserve.conf进行设置，svnserve.conf主要设置整体的安全策略，passwd则设置用户名和密码， authz 则是设置具体的用户有什么权限。5. 访问权限设置 编辑svnserve.conf文件 anon-access：匿名用户的权限，可以为read，write和none，默认值read。不允许匿名用户访问：anon-access = none auth-access：认证用户的权限，可以为read，write和none，默认值write。 password-db：密码数据库的路径，去掉前边的# authz-db：认证规则库的路径，去掉前边的# 这些配置项的行都要顶格，否则会报错。修改配置后需要重启svn才能生效。 编辑passwd文件，加入用户名和密码 用户名=密码, 采用的是明码。如allen=1（apache模式下密码为经过加密的变化） 如下： 12[users]slhan=justdoit 编辑authz文件，配置用户访问权限（如下为示例） [groups]设置，为了便于管理，可以将一些用户放到一个组里边，比如：owner=allen,ellen,如下： 1234[groups]# harry_and_sally = harry,sally# harry_sally_and_joe = harry,sally,&amp;joeowner=slhan groups下边的配置表示对一个目录的认证规则，比如对根目录的认证规则的section为[/]。设置单用户的认证规则时一个用户一行，如： 123[/]allen=rw #allen对根目录的权限为rwellen=r #ellen对根目录的权限为r 如果使用group，需要在group名字前加@,如 1@owner=rw 每个仓库的根目录(/)就是自己的起始目录；[repos:/]这种方式只适用于多仓库的情况；[/]适合于单仓库和单仓库的方式。更多关于单仓库和多仓库的问题， 6. 启动svn服务svnserve -d -T -r /home/svn描述说明： -d 表示svnserver以“守护”进程模式运行 -T 表示以线程模式运行，增加效率 -r 指定文件系统的根位置（版本库的根目录），这样客户端不用输入全路径，就可以访问版本库。如: svn://你的IP/repo7. 验证系统使用客户端访问svn://你的IP/repo 注意authz passwd svnserve.conf文件所有行的前面都不能有空格注意建立svn管理用户和组]]></content>
      <categories>
        <category>Linux</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下Apache2.4.25部署手册]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FLinux%E4%B8%8BApache2-4-25%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[要求： 确保已经安装了APR APR-Util PCRE(pcre而不是pcre2，pcre2后面出错) ANSI-C编译器:gcc gcc-c++ 1. 安装gcc编译器1yum install -y gcc gcc-c++ 2. 安装APR，放到/var/local目录下，解压：1tar -zxvf apr-1.5.2.tar.gz 接着进行安装步骤了，进入到解压的目录下执行如下命令123./configure --prefix=/usr/local/apr/ （设置apr安装目录，这里的 /usr/local/apr/ 才是apr真正的安装目录）makemake install 3. 安装apr-util到网上卸载apr-util-1.5.1.tar.gz。再次解压缩。。。和上面的一样，不过它的安装需要依赖于apr，1234./configure --prefix=/usr/local/apr-util/ --with-apr=/usr/local/apr/ make make install 4. 安装pcre，同apr5. apache安装添加依赖于apr, apr-util, pcre 6. 启动1/usr/local/apache/bin/apachectl start]]></content>
      <categories>
        <category>中间件</category>
        <category>负载均衡</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下nginx1.11.9部署手册]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FLinux%E4%B8%8Bnginx1-11-9%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[要求： 确保已经安装了PCRE ANSI-C编译器:gcc gcc-c++ 1. 安装PCRE1yum -y install pcre-devel 2. 安装nginx，放到/usr/local目录下，解压：1tar -zxvf nginx-1.11.9.tar.gz 接着进行安装步骤了，进入到解压的目录下执行如下命令12345678910111213141516171819./configurenginx path prefix: "/usr/local/nginx"nginx binary file: "/usr/local/nginx/sbin/nginx"# 注意binary file为启动nginx时的路径。nginx modules path: "/usr/local/nginx/modules"nginx configuration prefix: "/usr/local/nginx/conf"nginx configuration file: "/usr/local/nginx/conf/nginx.conf"nginx pid file: "/usr/local/nginx/logs/nginx.pid"nginx error log file: "/usr/local/nginx/logs/error.log"nginx http access log file: "/usr/local/nginx/logs/access.log"nginx http client request body temporary files: "client_body_temp"nginx http proxy temporary files: "proxy_temp"nginx http fastcgi temporary files: "fastcgi_temp"nginx http uwsgi temporary files: "uwsgi_temp"nginx http scgi temporary files: "scgi_temp"makemake install 3. 在浏览器中输入IP：端口号启动，./nginx看到安装成功 停止，./ngins -s stop 4. 关闭nginx使用 ps -ef|grep nginx 查看nginx的进程，可以看到nginx有两个进程： 1234[root@iz2ze0h8cp7lva4at3etpoz* sbin]# ps -ef|grep nginxroot 7528 1 0 16:37 ? 00:00:00 nginx: master process ./nginxnobody 7529 7528 0 16:37 ? 00:00:00 nginx: worker processroot 7531 1121 0 16:37 pts/0 00:00:00 grep --color=auto nginx 从容停止nginx1kill - QUIT nginx 主进程号 停止nginx所有进程1pkill -9 nginx]]></content>
      <categories>
        <category>中间件</category>
        <category>负载均衡</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Registry HTTP API V2]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FDockerRegistryHTTPAPIV2%2F</url>
    <content type="text"><![CDATA[Docker Registry V2版本的官方HTTP API method path Entity Description GET /v2/ Base Check that the endpoint implements Docker Registry API V2. GET /v2/&lt;name&gt;/tags/list Tags Fetch the tags under the repository identified by name. GET /v2/&lt;name&gt;/manifests/&lt;reference&gt; Manifest Fetch the manifest identified by name and reference where reference can be a tag or digest. A HEADrequest can also be issued to this endpoint to obtain resource information without receiving all data. PUT /v2/&lt;name&gt;/manifests/&lt;reference&gt; Manifest Put the manifest identified by name and reference where reference can be a tag or digest. DELETE /v2/&lt;name&gt;/manifests/&lt;reference&gt; Manifest Delete the manifest identified by name and reference. Note that a manifest can only be deleted by digest. GET /v2/&lt;name&gt;/blobs/&lt;digest&gt; Blob Retrieve the blob from the registry identified bydigest. A HEADrequest can also be issued to this endpoint to obtain resource information without receiving all data. DELETE /v2/&lt;name&gt;/blobs/&lt;digest&gt; Blob Delete the blob identified by name and digest POST /v2/&lt;name&gt;/blobs/uploads/ Initiate Blob Upload Initiate a resumable blob upload. If successful, an upload location will be provided to complete the upload. Optionally, if thedigest parameter is present, the request body will be used to complete the upload in a single request. GET /v2/&lt;name&gt;/blobs/uploads/&lt;uuid&gt; Blob Upload Retrieve status of upload identified byuuid. The primary purpose of this endpoint is to resolve the current status of a resumable upload. PATCH /v2/&lt;name&gt;/blobs/uploads/&lt;uuid&gt; Blob Upload Upload a chunk of data for the specified upload. PUT /v2/&lt;name&gt;/blobs/uploads/&lt;uuid&gt; Blob Upload Complete the upload specified by uuid, optionally appending the body as the final chunk. DELETE /v2/&lt;name&gt;/blobs/uploads/&lt;uuid&gt; Blob Upload Cancel outstanding upload processes, releasing associated resources. If this is not called, the unfinished uploads will eventually timeout. GET /v2/_catalog Catalog Retrieve a sorted, json list of repositories available in the registry.]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker1.7.1在CentosOS6.7上的安装指南]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FDocker1-7-1%E5%9C%A8CentosOS6-7%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[1. 安装新版本内核 注意：V4 CPU升级有问题，不要升级12345678910rpm -ivh kernel-lt-devel-3.10.104-1.el6.elrepo.x86_64.rpm``` ### 2. 修改启动项&gt;**注意：V4 CPU不要修改**编辑内核配置文件，将默认的 `default=1` 修改为0```bashvim /boot/grub/grub.confdefault=0``` ### 3. 安装cgroups,docker依赖项 rpm -ivh libcgroup-0.40.rc1-23.el6.x86_64.rpm123### 4. 安装docker 1.7.1```bashrpm -ivh docker-engine-1.7.1-1.el6.x86_64.rpm 5. Docker配置文件修改,主要为docker仓库和4243服务端口外放1vim /etc/sysconfig/docker --insecure-registry后面是私人仓库地址1other_args="-H tcp://0.0.0.0:4243 -H unix:///var/run/docker.sock --graph=/iflytek/containers --insecure-registry 192.168.76.53:5000"]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux SSH免密码登录配置指南]]></title>
    <url>%2Fposts%2F2017%2F10%2F12%2FSSH%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[一、配置SSH免密码登录我用的是root用户，每台服务器都生成公钥，合并到authorized_keys后，分发到集群内各节点 。 1. 生成公钥/私钥每台机器上运行1ssh-keygen -t rsa -P '' 2. 收集所有公钥写入authorized_keys 分别复件docker2 docker3密钥文件到docker1 12scp /root/.ssh/id_rsa.pub docker1:/root/.ssh/docker2_id_rsa.pub // docker2 机器上执行scp /root/.ssh/id_rsa.pub docker1:/root/.ssh/docker3_id_rsa.pub // docker3 机器上执行 查看docker1上， 已复制的文件 12345678910[root@docker1 ~]# ls -al ~/.ssh/total 32drwxr-xr-x 2 root root 4096 May 12 10:28 .dr-xr-x---. 3 root root 4096 May 12 10:22 ..-rw-r--r-- 1 root root 2364 May 12 10:28 authorized_keys-rw-r--r-- 1 root root 394 May 12 10:28 cdh2_id_rsa.pub-rw-r--r-- 1 root root 394 May 12 10:27 cdh3_id_rsa.pub-rw------- 1 root root 1675 May 12 10:22 id_rsa-rw-r--r-- 1 root root 394 May 12 10:22 id_rsa.pub-rw-r--r-- 1 root root 1596 May 12 10:15 known_hosts 之前拷贝的名字为cdh2_id_rsa.pub、cdh3_id_rsa.pub 将复制来的密钥添加到docker1上的authorized_keys 123cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keyscat /root/.ssh/docker2_id_rsa.pub &gt;&gt; /root/.ssh/authorized_keyscat /root/.ssh/docker3_id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys 3. 分发authorized_keys到集群内节点将docker1上的authorized_keys文件， 分发到集群内其它机器12scp /root/.ssh/authorized_keys docker2:/root/.ssh/authorized_keysscp /root/.ssh/authorized_keys docker3:/root/.ssh/authorized_keys 4. 验证配置是否成功12345[root@docker1 ~]# ssh docker2Last login: Fri May 12 10:57:04 2017 from 192.168.75.11[root@docker2 ~]# ssh docker1Last login: Fri May 12 10:56:30 2017 from 192.168.75.11[root@docker1 ~]# 二、 常见问题1. SSH互信配置完成，仍然要输入密码原因分析 .ssh目录的权限必须是700，同时本机的私钥的权限必须设置成600： /root目录权限不对,要设置为755，/root的用户和用户组必须为root 查看日志/var/log/secure]]></content>
      <categories>
        <category>Linux</category>
        <category>SSH</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[keepalived安装指南]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2Fkeepalived%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[一、 安装指南1. 解压安装1234567tar -zxvf keepalived-1.2.13.tar.gzcd keepalived-1.2.13#安装依赖yum install –y openssl openssl-devel#配置、编译安装./configure --disable-fwmarkmake &amp;&amp; make install 2. 开机服务启动123cp /usr/local/etc/rc.d/init.d/keepalived /etc/init.d/cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/ #启动初始化cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/ 注：确保拷贝的路径存在（/etc/keepalived/可能会不存在，不存在首先创建） 123cp /usr/local/sbin/keepalived /usr/sbin/ #启动文件chkconfig --add keepalivedchkconfig --level 2345 keepalived on 3. 设置Nginx等监控脚本（在与Nginx绑定时需要）为了防止Keepalived节点上nginx等程序终止，但Keepalived服务正常导致IP无法漂移，需要增加监控脚本，对这些依赖的进程进行监控 创建监控脚本 1234567891011[root@localhost ~]# vim /etc/keepalived/nginx_pid.sh#!/bin/bash# count=`netstat -tln | grep 80 | grep -v 'grep' | grep -v '/bin/bash' | grep -v '[0-9]+80[0-9]+' | wc -l`count=`ps aux | grep nginx | grep -v grep | grep -v '/bin/bash' | wc -l`echo "Nginx process number:"$countif [ $count -gt 0 ]; then exit 0;else service keepalived stop exit 1;fi 为启动脚本授权 1chmod 755 /etc/keepalived/nginx_pid.sh 配置keepalived权重及脚本调用 12345678910111213141516171819202122232425262728293031323334353637383940414243[root@localhost ~]# vi /etc/keepalived/keepalived.confglobal_defs &#123; notification_email &#123; acassen@firewall.loc failover@firewall.loc sysadmin@firewall.loc &#125; notification_email_from Alexandre.Cassen@firewall.loc smtp_server 127.0.0.1 smtp_connect_timeout 30 router_id LVS_DEVEL&#125; vrrp_script checknginx &#123; script "/etc/keepalived/nginx_pid.sh" interval 3 weight -20 &#125;vrrp_instance VI_1 &#123; state BACKUP interface eth0 virtual_router_id 51 priority 80 nopreemp advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; track_script &#123; checknginx &#125; track_interface &#123; eth0 &#125; virtual_ipaddress &#123; 192.168.32.81 &#125;&#125; 检测脚本可以自定义规则，比如：curl ip地址，检测80端口是否被占用等。 其他进程监控 可增加多个check。 4. 启动|停止配置1service keepalived start | stop | restart 二、 开启日志keepalived默认不开启日志，需要修改配置文件开启日志1234#centosvim /etc/sysconfig/keepalived#ubuntuvim /etc/default/keepalived 1. 改成：KEEPALIVED_OPTIONS=&quot;-D -d -S 0&quot;12vim /etc/rsyslog.conf#如果没有/etc/rsyslog.conf文件，使用yum安装yum install rsyslog 2. 最后一行追加：1local0.* /var/log/keepalived.log 3. 最后重启12service rsyslog restartservice keepalived restart 三、 常见问题1. 日志报one or more VIP associated with VRID mismatch actual MASTER advert是同一网段部署了多个keepalived集群，导致virtual_router_id值冲突了，均使用了默认的值：51，修改其中一个virtual_router_id值为88（新数字就可以）解决 2. keepalived日志报错狂刷：IPVS: Can’t initialize ipvs: Protocol not available原因是ip_vs模块系统默认没有自动加载，可以通过lsmod | grep ip_vs 命令查看一下，如果没有任何输出则表示ip_vs模块并没有被内核加载，那必须手动加载一下：12modprobe ip_vsmodprobe ip_vs_wrr 然后再查看系统日志发现keepalived已经正常工作了。如果要让系统开机加载此模块的话得讲刚才那两句话写到/etc/rc.local文件中，这样开机就能自动加载了。 3. 报错IPVS: Can’t initialize ipvs: Permission denied (you must be root)使用root用户。若使用容器在container运行时加上--privileged=true]]></content>
      <categories>
        <category>中间件</category>
        <category>高可用</category>
        <category>Keepalived</category>
      </categories>
      <tags>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[InstallMongoDBCommunityEdition]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2FInstallMongoDBCommunityEdition%2F</url>
    <content type="text"><![CDATA[1. Configure the package management system (yum).Create a /etc/yum.repos.d/mongodb-org-3.4.repo file so that you can install MongoDB directly, using yum. For the latest stable release of MongoDBUse the following repository file:123456[mongodb-org-3.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc You can find .repo files for each release in the repository itself. Remember that odd-numbered minor release versions (e.g. 2.5) are development versions and are unsuitable for production use. 2. Install the MongoDB packages and associated tools.1yum install -y mongodb-org Run MongoDB Community Edition1. Configure SELinux If you are using SELinux, you must configure SELinux to allow MongoDB to start on Red Hat Linux-based systemsTo configure SELinux, administrators have three options: If SELinux is in enforcing mode, enable access to the relevant ports that the MongoDB deployment will use (e.g. 27017). For default settings, this can be accomplished by running: 1semanage port -a -t mongod_port_t -p tcp 27017 Disable SELinux by setting the SELINUX setting to disabled in /etc/selinux/config. 1SELINUX=disabled You must reboot the system for the changes to take effect. Set SELinux to permissive mode in /etc/selinux/config by setting the SELINUX setting to permissive. You must reboot the system for the changes to take effect. 2. Data Directories and PermissionsThe MongoDB instance stores its data files in /var/lib/mongo and its log files in /var/log/mongodb by default, and runs using the mongod user account. You can specify alternate log and data file directories in /etc/mongod.conf. 3. Procedure1. Start MongoDB.1sudo service mongod start 2. Verify that MongoDB has started successfullyYou can verify that the mongod process has started successfully by checking the contents of the log file at /var/log/mongodb/mongod.log for a line reading [initandlisten] waiting for connections on port where &lt;port&gt; is the port configured in /etc/mongod.conf, 27017 by default. You can optionally ensure that MongoDB will start following a system reboot by issuing the following command:1sudo chkconfig mongod on 3. Stop MongoDB1sudo service mongod stop 4. restart MongoDB1sudo service mongod restrat Uninstall MongoDB Community Edition1234sudo service mongod stopsudo yum erase $(rpm -qa | grep mongodb-org)sudo rm -r /var/log/mongodbsudo rm -r /var/lib/mongo]]></content>
      <categories>
        <category>数据库</category>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat7.0.79镜像定制说明]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2Ftomcat7-0-79%E9%95%9C%E5%83%8F%E5%AE%9A%E5%88%B6%E8%AF%B4%E6%98%8E%2F</url>
    <content type="text"><![CDATA[一、 设置session共享，可使用memcached或Redis（实际部署只能使用其中一个），下面详细介绍：use memcached session share（这里使用kryo 策略） 1. 添加jar包到tomcat的lib目录下支持memcache共享： asm-5.0.3.jar kryo-3.0.3.jar kryo-serializers-0.37.jar memcached-session-manager-1.9.5.jar memcached-session-manager-tc7-1.9.5.jar minlog-1.3.0.jar msm-kryo-serializer-1.9.5.jar objenesis-2.1.jar reflectasm-1.10.1.jar spymemcached-2.12.0.jar2. 添加下面的配置文件到content.xml中12345678&lt;Manager transcoderFactoryClass="de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory" sessionBackupTimeout="180000" sessionBackupAsync="false" requestUriIgnorePattern=".*\.(png|gif|jpg|css|js)$" lockingMode="auto" sticky="false" memcachedNodes="n1:172.31.1.73:11211" className="de.javakaffee.web.msm.MemcachedBackupSessionManager"/&gt; 3. Reboot the server, and sessions should now be stored in Memcached.use redis session share1. 添加jar包到tomcat的lib目录下支持redis共享： commons-pool-2.2.2.jar jedis-2.5.2.jar tomcat-redis-session-manager-1.2-tomcat-7.jar2. 添加下面的配置文件到content.xml中123456&lt;Valve className="com.radiadesign.catalina.session.RedisSessionHandlerValve" /&gt; &lt;Manager className="com.radiadesign.catalina.session.RedisSessionManager" host="172.31.1.73"&lt;!-- optional: defaults to "localhost" --&gt; port="6379"&lt;!-- optional: defaults to "6379" --&gt; database="0"&lt;!-- optional: defaults to "0" --&gt; maxInactiveInterval="60"&lt;!-- optional: defaults to "60" (in seconds) --&gt;/&gt; 3. Reboot the server, and sessions should now be stored in Redis.测试session共享是否成功访问http://tomcatip:port/sesstest.jsp，观察sessionid是否有变化 二、 使用log4j作为默认日志 拷贝log4j-1.2.11.jar、tomcat-juli-adapters.jar、log4j.properties到%TOMCAT_HOME%/lib/目录 拷贝tomcat-juli.jar到%TOMCAT_HOME%/bin/目录 删除%TOMCAT_HOME%/conf/logging.properties jar包下载地址见(这是tomcat6):https://tomcat.apache.org/tomcat-6.0-doc/logging.html#Using_Log4j 我的log4j.properties文件如下,这样设为按照大小分割,每5MB分割，最多分割为30个文件，超过了循环覆盖12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849log4j.rootLogger=INFO, CATALINA# Define all the appenderslog4j.appender.CATALINA=org.apache.log4j.RollingFileAppenderlog4j.appender.CATALINA.File=$&#123;catalina.home&#125;/logs/catalina.outlog4j.appender.CATALINA.Append=truelog4j.appender.CATALINA.Encoding=UTF-8log4j.appender.CATALINA.layout=org.apache.log4j.PatternLayoutlog4j.appender.CATALINA.layout.ConversionPattern=%d&#123;yyyy.MM.dd HH:mm:ss&#125; %p-%c&#123;1&#125;: [%m]%nlog4j.appender.CATALINA.MaxFileSize=5MBlog4j.appender.CATALINA.MaxBackupIndex=30# Roll-over the log by sizelog4j.appender.LOCALHOST=org.apache.log4j.RollingFileAppenderlog4j.appender.LOCALHOST.File=$&#123;catalina.home&#125;/logs/localhost.loglog4j.appender.LOCALHOST.Append=truelog4j.appender.LOCALHOST.Encoding=UTF-8log4j.appender.LOCALHOST.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOCALHOST.layout.ConversionPattern=%d&#123;yyyy.MM.dd HH:mm:ss&#125; %p-%c&#123;1&#125;: [%m]%nlog4j.appender.LOCALHOST.MaxFileSize=5MBlog4j.appender.LOCALHOST.MaxBackupIndex=30log4j.appender.MANAGER=org.apache.log4j.RollingFileAppenderlog4j.appender.MANAGER.File=$&#123;catalina.home&#125;/logs/manager.loglog4j.appender.MANAGER.Append=truelog4j.appender.MANAGER.Encoding=UTF-8log4j.appender.MANAGER.layout=org.apache.log4j.PatternLayoutlog4j.appender.MANAGER.layout.ConversionPattern=%d&#123;yyyy.MM.dd HH:mm:ss&#125; %p-%c&#123;1&#125;: [%m]%nlog4j.appender.MANAGER.MaxFileSize=5MBlog4j.appender.MANAGER.MaxBackupIndex=30log4j.appender.HOST-MANAGER=org.apache.log4j.RollingFileAppenderlog4j.appender.HOST-MANAGER.File=$&#123;catalina.home&#125;/logs/host-manager.loglog4j.appender.HOST-MANAGER.Append=truelog4j.appender.HOST-MANAGER.Encoding=UTF-8log4j.appender.HOST-MANAGER.layout=org.apache.log4j.PatternLayoutlog4j.appender.HOST-MANAGER.layout.ConversionPattern=%d&#123;yyyy.MM.dd HH:mm:ss&#125; %p-%c&#123;1&#125;: [%m]%nlog4j.appender.HOST-MANAGER.MaxFileSize=5MBlog4j.appender.HOST-MANAGER.MaxBackupIndex=30log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.Encoding=UTF-8log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayoutlog4j.appender.CONSOLE.layout.ConversionPattern = %d [%t] %-30p %c- %m%n# Configure which loggers log to which appenderslog4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost]=INFO, LOCALHOSTlog4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager]=INFO, MANAGERlog4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager]=INFO, HOST-MANAGER]]></content>
      <categories>
        <category>中间件</category>
        <category>应用服务器</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker问题]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2Fdocker%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. 运行容器报错：Error response from daemon: Error running DeviceCreate (createSnapDevice) dm_task_run failedmetadata目录在docker info查看1234service docker stopthin_check /iflytek/containers/devicemapper/devicemapper/metadatathin_check --clear-needs-check-flag /iflytek/containers/devicemapper/devicemapper/metadataservice docker start 2. Error running DeviceCreate (ActivateDevice) dm_task_run failed3. 重启docker服务器后 遇到 ‘device or resource busy’错误如果有container在运行的时候重启 docker 服务， 可能会导致 container无法启动， 错误信息类似于12Error response from daemon: Cannot start container zookeeper: Error getting container ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c from driver devicemapper: Error mounting '/dev/mapper/docker-8:1-525372-ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c' on '/var/lib/docker/devicemapper/mnt/ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c': device or resource busy 2015/01/26 04:42:07 Error: failed to start one or more containers 或者12d2859bd1f84b: Error pulling image (latest) from xxxxxx, Driver devicemapper failed to create image rootfs e6158e7962db43274de40fc3db65ad64811d43fe342dea633df20639f5a4e3cd: device e6158e7962db43274de40fc3db65ad64811d43fe342dea633df20639f5a4e3cd already exists 43fe342dea633df20639f5a4e3cd already exists c049b2b: Download complete e6158e7962db: Error downloading dependent layers 这是一个Docker的 bug ，解决方式是先找出没有umount的路径1cat /proc/mounts | grep "mapper/docker" | awk '&#123;print $2&#125;' 然后依次umount]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux集群时钟同步ntp（NetworkTimeProtocol）安装指南]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2Flinux%E9%9B%86%E7%BE%A4%E6%97%B6%E9%92%9F%E5%90%8C%E6%AD%A5ntp%EF%BC%88NetworkTimeProtocol%EF%BC%89%2F</url>
    <content type="text"><![CDATA[使用root用户进行操作，涉及所有服务器。 1. 安装ntp服务 查看是否已经安装：rpm -qa | grep ntp。 如果已安装就不需要再安装了。123[root@docker2 ~]# rpm -qa | grep ntpntpdate-4.2.6p5-5.el6.centos.x86_64ntp-4.2.6p5-5.el6.centos.x86_64 如果没安装，使用： yum install ntp 安装2. 设置开机启动： chkconfig ntpd on3. 修改/etc/ntp.conf 将restrict default kod nomodify notrap nopeer noquery注释掉，这个对客户端的限制太多。ntp 4.2之前版本添加restrict default nomodify notrust（允许任何IP的客户机都可以进行时间同步）以允许所有客户端获取时间数据。notrust 参数的功能是并需通过认证才能同步，也就是客户端同步命令中必须有keyid和key才能通过。 注释掉所有的trustedkey， 添加 trustedkey 1 2 3，后边指定数字任意，但必须与/etc/ntp/keys文件中的 值保持一致。也就是说1 2 3 这三个数分别作为认证的keyid。 配置时间源， 指定同步参考的服务器时间。如果连接不了外网就把所有外网时间服务器都注释掉 123server 10.148.27.166 // 局域网（GA网）内，客户机（slaver）配置为集群内master服务器IPserver ntp.api.bz // 连接不了外网就注释掉server 2.centos.pool.ntp.org // 连接不了外网就注释掉 添加如下配置项目，以让NTP Server和其自身保持同步，如果在/etc/ntp.conf中定义的server都不可用时，将使用local时间作为ntp服务提供给ntp客户端。 客户端不需要配置，只在服务端配置即可 12server 127.127.1.0 # local clock //服务端如果连接不了外网，使用本地时间提供给客户端同步fudge 127.127.1.0 stratum 2 最后保存退出 4. 修改/etc/ntp/keys文件（集群内所在节点）添加如下配置， 前面的数字必须与 /etc/ntp.conf 文件中 trustedkey 后边指定的数字一致才行，字符串任意。 1231 M gao2 M tian3 M di 5. 修改时区12rm -f /etc/localtimecp -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 6. 重启 ntp 服务 service ntpd restart 要注意ntp的重启是有延迟的，所以有的时候重启以后没发现修改配置生效，是因为这个延迟导致的， 这是因为NTP server还没有和其自身或者它的server同步上 如果集群内所在节点都安装了NTP服务，服务端时间源外网时间源不可用时，可与本地时间同步，且客户端时间源配置了集群内服务端，那么启动所有节点NTP服务，集群内节点即可实现时间同步。 如果客户端NTP服务未启动，或者未配置集群内时间源，可通过执行 ntpdate &lt;ntp server&gt; 来同步，我们只要指定与master节点同步就可以了。 手动在集群内所客户端系统上执行 ntpdate 10.148.27.166 ，测试服务器是否成功配置；1成功返回：ntpdate[15522]: adjust time server 10.148.27.166 offset 0.290456 sec 同步调试模式1ntpdate -d 10.148.27.166 7. 常见问题问题一： 10.148.27.166: Server dropped: no data ntp 4.2（包括4.2）之后的版本，在restrict的定义中使用notrust的话，会导致以上错误。使用以下命令查看ntp版本： 1ntpq -c version 检查ntp server的防火墙，可能是server的防火墙屏蔽了upd 123端口可关闭防火墙试试，若同步成功，说明是防火墙问题，开启防火墙端口即可。关闭防火墙： 1service iptables stop 问题二： 10.148.27.166: Server dropped: Strata too highstartum的值正常情况下为0~15，修改/etc/ntp.conf中：startum后面的值在0~15之间即可。 成功返回adjust time server 10.148.27.166 offset 0.000073 sec 8. 常用命令12345678# 查看ntp版本ntpq -c versionntpdate -u ip# NTP服务状态ntpstatntpq -p# 查看NTP服务的运行状况watch ntpq -p]]></content>
      <categories>
        <category>Linux</category>
        <category>NTP</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7 minimal方式安装笔记]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2Fcentos7minimal%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[从ustc下载安装包 1. 修改网卡名称为eth0从CentOS/RHEL7起，可预见的命名规则变成了默认。这一规则，接口名称被自动基于固件，拓扑结构和位置信息来确定。出于习惯等一些原因，修改为熟悉的eth0. 编辑/etc/sysconfig/network-scripts/ifcfg-eno16777736可能是ifcfg-xxxx，将里面的NAME修改为eth0 重名名该文件为mv ifcfg-eno16777736 ifcfg-eth0 然后，禁用该可预测命名规则，向/etc/default/grub文件的GRUB_CMDLINE_LINUX变量追加：net.ifnames=0 biosdevname=0 运行命令grub2-mkconfig -o /boot/grub2/grub.cfg 来重新生成GRUB配置并更新内核参数 第4步重启就已经生效了，根据Centos 官方WIKI的FAQ中得知，如果你有多个接口，并且想要控制其设备名，而不是让内核以它自己的方式命名，创建/etc/udev/rules.d/XXX-net.rules规则是必要的！那么这里我们也创建好规则吧。以前系统的net规则名称是70-persistent-net.rules，这里我也按照这个名字定义规则！编辑文件添加下面一行。更换成你自己的MAC地址（08:00:27:a9:7a:e1）和接口（eth0）。 12vi /etc/udev/rules.d/70-persistent-net.rulesSUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR&#123;address&#125;=="00:0c:29:6d:06:88", ATTR&#123;type&#125;=="1", KERNEL=="eth*", NAME="eth0" 重启系统，验证！ 如果Centos7系统minimal方式安装是没有ifconfig命令的，可以通过安装net-tools解决。 备注：linux中查看网卡mac地址 ip ether后面的字段就是mac地址 ifconfig -a 其中 HWaddr字段就是mac地址 cat /sys/class/net/eth0/address 查看eth0的mac地址 cat /proc/net/arp 查看连接到本机的远端ip的mac地址 修改/etc/sysconfig/network-script/ifcfg-eth0:(注意：设置vmware为net共享模式) HWADDR=”00:0c:29:6d:06:88”iIPADDR=”192.168.11.103”NETMASK=”255.255.255.0”GATEWAY=”192.168.11.2”DNS1=8.8.8.8 2. 设置基础环境更新yum源安装ifconfig yum -y install net-tools安装其他 yum -y install gcc gcc-c++ vim dos2unix ntpdate]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟机网络模式]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2F%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[1. 桥接bridge桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位，那么物理网卡和虚拟网卡就相当于处于同一个网段，虚拟交换机就相当于一台现实网络中的交换机,所以两个网卡的IP地址也要设置为同一网段。所以当我们要在局域网使用虚拟机，对局域网其他pc提供服务时，例如提供ftp，提供ssh，提供http服务，那么就要选择桥接模式。 2. NAT（共享主机的IP地址）即让虚拟机借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网。 NAT模式中，虚拟机的网卡和物理网卡的网络，不在同一个网络，虚拟机的网卡，是在vmware提供的一个虚拟网络。 NAT和桥接的比较: NAT模式和桥接模式虚拟机都可以上外网。 由于NAT的网络在vmware提供的一个虚拟网络里，所以局域网其他主机是无法访问虚拟机的，而宿主机可以访问虚拟机，虚拟机可以访问局域网的所有主机，因为真实的局域网相对于NAT的虚拟网络，就是NAT的虚拟网络的外网，不懂的人可以查查NAT的相关知识。 桥接模式下，多个虚拟机之间可以互相访问；NAT模式下，多个虚拟机之间也可以相互访问。 3. Host-Only（仅主机模式）在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。其实Host-Only网络和NAT网络很相似，不同的地方就是Host-Only网络没有NAT服务，所以虚拟网络不能连接到Internet。主机和虚拟机之间的通信是通过VMware Network Adepter VMnet1虚拟网卡来实现的。 Host-Only的宗旨就是建立一个与外界隔绝的内部网络，来提高内网的安全性。这个功能或许对普通用户来说没有多大意义，但大型服务商会常常利用这个功能。如果你想为VMnet1网段提供路由功能，那就需要使用RRAS，而不能使用XP或2000的ICS，因为ICS会把内网的IP地址改为192.168.0.1，但虚拟机是不会给VMnet1虚拟网卡分配这个地址的，那么主机和虚拟机之间就不能通信了。]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[虚拟机NAT模式使用静态IP上网]]></title>
    <url>%2Fposts%2F2017%2F10%2F09%2F%E8%99%9A%E6%8B%9F%E6%9C%BANAT%E6%A8%A1%E5%BC%8F%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81IP%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[1. VMnet8虚拟网卡设置界面：这里不要勾选使用DHCP服务分配IP地址给虚拟机选项。然后配置子网IP，子网IP与宿主机的ip一定不能处在同一地址范围里，否则就算虚拟机能上网，网络既慢，还不稳定。例如主机的ip段是192.168.115.xxx，子网IP配为192.168.10.xxx来避开主机的ip段 点击上图中的NAT 设置，设置网关IP，如图： 2. 配置ifcfg-ethXX文件123456789101112DEVICE="eth0"BOOTPROTO="static"HWADDR="00:0C:29:93:F1:48"IPV6INIT="yes"NM_CONTROLLED="yes"ONBOOT="yes"TYPE="Ethernet"UUID="b2b2b49b-6be0-480e-a026-ee7c3a4aca28"IPADDR="192.168.11.100"NETMASK="255.255.255.0"GATEWAY="192.168.11.2"DNS1=8.8.8.8 BOOTPROTO：改为static GATEWAY：设为刚才设置的 IPADDR：配置ip，在第一步已经设置ip处于192.168.11.xxx这个范围，这里设置为100，只要不和网关相同均可3. 保存，如果没有自动重启网卡，运行service network restart，应该就能上网了]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker清空容器日志]]></title>
    <url>%2Fposts%2F2017%2F10%2F06%2Fdocker%E6%B8%85%E7%A9%BA%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[查看运行容器docker ps123[root@localhost 6.0.43]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESefaa84e26005 001-tomcat:6.0.43 "/bin/sh -c '$CATA..." About a minute ago Up About a minute 0.0.0.0:8080-&gt;8080/tcp tomcat 找到日志位置docker inspect ContainerID 找到LogPath对应的日志路径/var/log/……log-json.log 清空日志文件cat /dev/null &gt; /var/log/......log-json.log]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux sed命令介绍]]></title>
    <url>%2Fposts%2F2017%2F10%2F06%2Flinux-sed%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[删除删除第三行：1sed -i '3d' 1.txt 删除以winter开头的行1sed -i '/^winter/d' 1.txt 删除包含winter（特殊字符需要转义）的行1sed -i '/winter/d' 1.txt 插入在14行下插入新的一行：aaaaaa1sed -i 14a\aaaaaaa 1.txt 查询查询winter在文件中的行号1sed -ne '/winter/=' 1.txt 修改将文件中的_SUPERMODELIPPORT替换为$SMIPPORT，g代表全局替换，不加g替换第一个1sed -i "s%_SUPERMODELIPPORT%$SMIPPORT%g" 1.txt 修改第$ROW行为&#39;$HOST&#39; &#39;$HOSTNAME1sed -i -e $ROW'c\'$HOST' '$HOSTNAME 1.txt]]></content>
      <categories>
        <category>Linux</category>
        <category>sed</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[新机器检查基础环境]]></title>
    <url>%2Fposts%2F2017%2F10%2F06%2F%E6%96%B0%E6%9C%BA%E5%99%A8%E6%A3%80%E6%9F%A5%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[系统信息： cat /etc/redhat-release, uname -a, lsb_release -a cpu信息： cat /proc/cpuinfo，是否升级内核 内存信息： free -h 磁盘信息： df -h，挂载路径 网卡信息： ip a, ifconfig Linux系统时间设置： date 123TZ=Asia/Shanghailn -snf /usr/share/zoneinfo/$TZ /etc/localtimeecho $TZ &gt; /etc/timezone 主机名，ip和主机名映射: hostname,vim /etc/hosts yum源： 是否修改/etc/yum.repos.d 时钟同步：web服务器、solr机器（必须） ssh互信：web服务器、solr机器]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统基础环境设置]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2FLinux%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1. 更换本地yum源1. 从ustc下载.repo文件，切换源1cd /etc/yum.repos.d/ 将原有xx.repo文件全部改名为xx.repo.bak(rename .repo .repo.bak *.repo)1234567wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=1-O CentOS-ustc.repo 【centos5 ustc源】wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=2 -O CentOS-ustc.repo【centos6 ustc源】wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=3 -O CentOS-ustc.repo 【centos7 ustc源】yum clean allyum makecache 2. 检查源是否切换成功12yum list#看到很多列表表示成功 2. 修改主机名永久修改，需重启12345[root@docker1 ~]# vim /etc/sysconfig/network#NETWORKING=yesNETWORKING=yesNETWORKING_IPV6=noHOSTNAME=docker1 临时修改，立即生效（重启失效）123[root@docker1 ~]# hostname hh[root@docker1 ~]# hostnamehh 3. 修改host文件（ip地址和主机名绑定）123456[root@docker1 ~]# vim /etc/hosts127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6172.31.1.73 docker1172.31.1.85 docker2 172.31.1.86 docker3 4. 禁用IP6没有做过12345678910111213141516vi /etc/sysconfig/network在最后增加一句：IPV6INIT=nocat /etc/sysconfig/networkNETWORKING=yesIPV6INIT=no//修改hosts文件，注释ip6#vi /etc/hosts127.0.0.1 localhost.localdomain localhost #::1 localhost6.localdomain6 localhost6//立即停止IP6服务service ip6tables stop//永久停止ipv6的iptableschkconfig ip6tables off 5. 关闭防火墙1234#立即停止 （暂时停止，重启失效）service iptables stop#永久停止chkconfig iptables off #禁用 6. 禁用SELINUX1vim /etc/selinux/config 将SELINUX=enforcing改为SELINUX=disabled 7. 修改默认启动级别1234vim /etc/inittab#默认为5：图形界面的多用户#修改为3：带网络的多用户id:3:initdefault:]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker遇到的问题]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Fdocker%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. 运行容器报错：Error response from daemon: Error running DeviceCreate (createSnapDevice) dm_task_run failed metadata目录在docker info查看1234service docker stopthin_check /iflytek/containers/devicemapper/devicemapper/metadatathin_check --clear-needs-check-flag /iflytek/containers/devicemapper/devicemapper/metadataservice docker start 2. Error running DeviceCreate (ActivateDevice) dm_task_run failed3. 重启docker服务器后 遇到 ‘device or resource busy’错误如果有container在运行的时候重启 docker 服务， 可能会导致 container无法启动， 错误信息类似于12Error response from daemon: Cannot start container zookeeper: Error getting container ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c from driver devicemapper: Error mounting '/dev/mapper/docker-8:1-525372-ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c' on '/var/lib/docker/devicemapper/mnt/ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c': device or resource busy 2015/01/26 04:42:07 Error: failed to start one or more containers 或者12d2859bd1f84b: Error pulling image (latest) from xxxxxx, Driver devicemapper failed to create image rootfs e6158e7962db43274de40fc3db65ad64811d43fe342dea633df20639f5a4e3cd: device e6158e7962db43274de40fc3db65ad64811d43fe342dea633df20639f5a4e3cd already exists 43fe342dea633df20639f5a4e3cd already exists c049b2b: Download complete e6158e7962db: Error downloading dependent layers 这是一个Docker的 bug ，解决方式是先找出没有umount的路径1cat /proc/mounts | grep "mapper/docker" | awk '&#123;print $2&#125;' 然后依次umount]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[uninstall Docker]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Funinstalldocker%2F</url>
    <content type="text"><![CDATA[123yum list installed | grep dockeryum -y remove docker-engine.x86_64rm -rf /var/lib/docker]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install Docker]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Finstall%20docker%2F</url>
    <content type="text"><![CDATA[安装docker：1. Uninstall old versions1234$ sudo yum remove docker \ docker-common \ docker-selinux \ docker-engine 2. Install Docker CEYou can install Docker CE in different ways, depending on your needs: Most users set up Docker’s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach. Some users download the RPM package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet. In testing and development environments, some users choose to use automated convenience scripts to install Docker. Install using the repositoryBefore you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository. Set up the repository Install required packages. 1$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2 Use the following command to set up the stable repository. You always need the stable repository, even if you want to install builds from the edge or test repositories as well. 123$ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo Optional: Enable the edge and test repositories. These repositories are included in the docker.repo file above but are disabled by default. You can enable them alongside the stable repository. 1$ sudo yum-config-manager --enable docker-ce-edge 1$ sudo yum-config-manager --enable docker-ce-test You can disable the edge or test repository by running the yum-config-manager command with the --disable flag. To re-enable it, use the --enable flag. The following command disables the edge repository.1$ sudo yum-config-manager --disable docker-ce-edge Note: Starting with Docker 17.06, stable releases are also pushed to the edge and test repositories. Install Docker CE Update the yum package index.1$ sudo yum makecache fast Install the latest version of Docker CE, or go to the next step to install a specific version.1sudo yum install docker-ce Warning: If you have multiple Docker repositories enabled, installing or updating without specifying a version in the yum install or yum update command will always install the highest possible version, which may not be appropriate for your stability needs. On production systems, you should install a specific version of Docker CE instead of always using the latest. List the available versions. This example uses the sort -r command to sort the results by version number, highest to lowest, and is truncated. Note: This yum list command only shows binary packages. To show source packages as well, omit the .x86_64 from the package name. 123$ yum list docker-ce.x86_64 --showduplicates | sort -rdocker-ce.x86_64 17.06.0.el7 docker-ce-stable The contents of the list depend upon which repositories are enabled, and will be specific to your version of CentOS (indicated by the .el7 suffix on the version, in this example). Choose a specific version to install. The second column is the version string. The third column is the repository name, which indicates which repository the package is from and by extension its stability level. To install a specific version, append the version string to the package name and separate them by a hyphen (-):1$ sudo yum install docker-ce-&lt;VERSION&gt; Start Docker. 1$ sudo systemctl start docker Verify that docker is installed correctly by running the hello-world image. 1$ sudo docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. Upgrade Docker CE To upgrade Docker CE, first run sudo yum makecache fast, then follow the installation instructions, choosing the new version you want to install. Install from a packageIf you cannot use Docker’s repository to install Docker, you can download the .rpm file for your release and install it manually. You will need to download a new file each time you want to upgrade Docker. Go to https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ and download the .rpm file for the Docker version you want to install. Note: To install an edge package, change the word stable in the &gt; URL to edge. Install Docker CE, changing the path below to the path where you downloaded the Docker package. 1$ sudo yum install /path/to/package.rpm Start Docker. 1$ sudo systemctl start docker Verify that docker is installed correctly by running the hello-world image. 1$ sudo docker run hello-world Install using the convenience scriptreference https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-using-the-convenience-script Uninstall Docker CE Uninstall the Docker package: 1$ sudo yum remove docker-ce Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes: 1$ sudo rm -rf /var/lib/docker You must delete any edited configuration files manually.]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github学习]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Fgithub%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[##1. 为github帐号添加SSH keys使用git clone命令从github上同步github上的代码库时，如果使用SSH链接（如我自己的beagleOS项 目：git@github.com:DamonDeng/beagleOS.git），而你的SSH key没有添加到github帐号设置中，系统会报下面的错误：12Permission denied (publickey).fatal: The remote end hung up unexpectedly 这时需要在本地创建SSH key，然后将生成的SSH key文件内容添加到github帐号上去。创建SSH key的方法很简单，执行如下命令就可以：ssh-keygen然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中～/.ssh/id_rsa.pub 然后用文本编辑工具打开该文件，我用的是vim,所以命令是：vim ~/.ssh/id_rsa.pub 接着拷贝.ssh/id_rsa.pub文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中。打开github帐号管理中的添加SSH key界面的步骤如下： 登录github 点击右上方的Accounting settings图标 选择 SSH key 点击 Add SSH key在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的~/.ssh/id_rsa.pub文件内容粘帖到key一栏，在点击“add key”按钮就可以了。添加过程github会提示你输入一次你的github密码 添加完成后再次执行git clone就可以成功克隆github上的代码库了。 来源： http://blog.csdn.net/keyboardota/article/details/7603630 ##2. 布拉布拉]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下任务调度crond笔记]]></title>
    <url>%2Fposts%2F2017%2F10%2F01%2FLinux%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6crond%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装1yum install -y vixie-cron crond 添加调度计划调度表达式介绍12345678# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 栗子：1234* * * * * /bin/bash /home/crontab.sh #每分钟执行/home/crontab.sh0 * * * * /bin/bash /home/crontab.sh #每小时执行/home/crontab.sh0 0 * * * /bin/bash /home/crontab.sh #每天凌晨执行/home/crontab.sh*/2 * * * * /bin/bash /home/crontab.sh #每两分钟执行/home/crontab.sh 表达式最小支持分钟，如果想按照秒执行呢？12345step=5 #间隔的秒数for (( i = 0; i &lt; 60; i=(i+step) )); do restartShutdownTomcat sleep $step done 脚本里通过for循环，能够按秒执行。 如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。则crontab.sh中step的值为7，循环结束条件i&lt;420， crontab -e可以输入以下语句来实现1*/7 * * * * /home/crontab.sh 添加调度计划 一种是直接编辑，执行crontab -e，然后输入调度表达式 另一种是编辑文件，然后执行crontab absolutePath，我使用是这种 注意：使用编辑文件方式添加会覆盖原来的crontab任务 crond不执行原因分析：1. 没有使用绝对路径包括crond命令和脚本 2. crontab不提供所执行用户的环境变量解决方法：在脚本中加入下面这一行：1. /etc/profile 或者导入环境变量(例如Java环境)：1export JAVA_HOME=/usr/local/java 3. 脚本没有可执行权限在crontab中建议使用 sh 或 bash 来执行shell脚本，避免因脚本文件的执行权限丢失导致任务失败。 4. 放大招：查看日志1tail /var/log/cron]]></content>
      <categories>
        <category>Linux</category>
        <category>crond</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>crond</tag>
      </tags>
  </entry>
</search>
