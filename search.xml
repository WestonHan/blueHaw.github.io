<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux系统基础环境设置]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2FLinux%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1. 更换本地yum源1. 从ustc下载.repo文件，切换源1cd /etc/yum.repos.d/ 将原有xx.repo文件全部改名为xx.repo.bak(rename .repo .repo.bak *.repo)1234567wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=1-O CentOS-ustc.repo 【centos5 ustc源】wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=2 -O CentOS-ustc.repo【centos6 ustc源】wget https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock=3 -O CentOS-ustc.repo 【centos7 ustc源】yum clean allyum makecache 2. 检查源是否切换成功12yum list#看到很多列表表示成功 2. 修改主机名永久修改，需重启12345[root@docker1 ~]# vim /etc/sysconfig/network#NETWORKING=yesNETWORKING=yesNETWORKING_IPV6=noHOSTNAME=docker1 临时修改，立即生效（重启失效）123[root@docker1 ~]# hostname hh[root@docker1 ~]# hostnamehh 3. 修改host文件（ip地址和主机名绑定）123456[root@docker1 ~]# vim /etc/hosts127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6172.31.1.73 docker1172.31.1.85 docker2 172.31.1.86 docker3 4. 禁用IP6没有做过12345678910111213141516vi /etc/sysconfig/network在最后增加一句：IPV6INIT=nocat /etc/sysconfig/networkNETWORKING=yesIPV6INIT=no//修改hosts文件，注释ip6#vi /etc/hosts127.0.0.1 localhost.localdomain localhost #::1 localhost6.localdomain6 localhost6//立即停止IP6服务service ip6tables stop//永久停止ipv6的iptableschkconfig ip6tables off 5. 关闭防火墙1234#立即停止 （暂时停止，重启失效）service iptables stop#永久停止chkconfig iptables off #禁用 6. 禁用SELINUX1vim /etc/selinux/config 将SELINUX=enforcing改为SELINUX=disabled 7. 修改默认启动级别1234vim /etc/inittab#默认为5：图形界面的多用户#修改为3：带网络的多用户id:3:initdefault:]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[keepalived遇到的问题]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Fkeepalived%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. keepalived日志报错狂刷：IPVS: Can’t initialize ipvs: Protocol not available原因是ip_vs模块系统默认没有自动加载，可以通过lsmod | grep ip_vs 命令查看一下，如果没有任何输出则表示ip_vs模块并没有被内核加载，那必须手动加载一下：12modprobe ip_vsmodprobe ip_vs_wrr 然后再查看系统日志发现keepalived已经正常工作了。如果要让系统开机加载此模块的话得讲刚才那两句话写到/etc/rc.local文件中，这样开机就能自动加载了。 2. 报错IPVS: Can’t initialize ipvs: Permission denied (you must be root)在container运行时加上--privileged=true]]></content>
      <categories>
        <category>keepalived</category>
      </categories>
      <tags>
        <tag>keepalived</tag>
        <tag>high availability(HA)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker遇到的问题]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Fdocker%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[1. 运行容器报错：Error response from daemon: Error running DeviceCreate (createSnapDevice) dm_task_run failed metadata目录在docker info查看1234service docker stopthin_check /iflytek/containers/devicemapper/devicemapper/metadatathin_check --clear-needs-check-flag /iflytek/containers/devicemapper/devicemapper/metadataservice docker start 2. Error running DeviceCreate (ActivateDevice) dm_task_run failed3. 重启docker服务器后 遇到 ‘device or resource busy’错误如果有container在运行的时候重启 docker 服务， 可能会导致 container无法启动， 错误信息类似于12Error response from daemon: Cannot start container zookeeper: Error getting container ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c from driver devicemapper: Error mounting '/dev/mapper/docker-8:1-525372-ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c' on '/var/lib/docker/devicemapper/mnt/ddf1dd91bbf46dc648268327f8f7c6fffaf2f19cda5cf1d97fdc701016d4332c': device or resource busy 2015/01/26 04:42:07 Error: failed to start one or more containers 或者12d2859bd1f84b: Error pulling image (latest) from xxxxxx, Driver devicemapper failed to create image rootfs e6158e7962db43274de40fc3db65ad64811d43fe342dea633df20639f5a4e3cd: device e6158e7962db43274de40fc3db65ad64811d43fe342dea633df20639f5a4e3cd already exists 43fe342dea633df20639f5a4e3cd already exists c049b2b: Download complete e6158e7962db: Error downloading dependent layers 这是一个Docker的 bug ，解决方式是先找出没有umount的路径1cat /proc/mounts | grep "mapper/docker" | awk '&#123;print $2&#125;' 然后依次umount]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[uninstall docker]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Funinstalldocker%2F</url>
    <content type="text"><![CDATA[123yum list installed | grep dockeryum -y remove docker-engine.x86_64rm -rf /var/lib/docker]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[install docker]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Finstall%20docker%2F</url>
    <content type="text"><![CDATA[安装docker：1. Uninstall old versions1234$ sudo yum remove docker \ docker-common \ docker-selinux \ docker-engine 2. Install Docker CEYou can install Docker CE in different ways, depending on your needs: Most users set up Docker’s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach. Some users download the RPM package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet. In testing and development environments, some users choose to use automated convenience scripts to install Docker. Install using the repositoryBefore you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository. Set up the repository Install required packages. 1$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2 Use the following command to set up the stable repository. You always need the stable repository, even if you want to install builds from the edge or test repositories as well. 123$ sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo Optional: Enable the edge and test repositories. These repositories are included in the docker.repo file above but are disabled by default. You can enable them alongside the stable repository. 1$ sudo yum-config-manager --enable docker-ce-edge 1$ sudo yum-config-manager --enable docker-ce-test You can disable the edge or test repository by running the yum-config-manager command with the --disable flag. To re-enable it, use the --enable flag. The following command disables the edge repository.1$ sudo yum-config-manager --disable docker-ce-edge Note: Starting with Docker 17.06, stable releases are also pushed to the edge and test repositories. Install Docker CE Update the yum package index.1$ sudo yum makecache fast Install the latest version of Docker CE, or go to the next step to install a specific version.1sudo yum install docker-ce Warning: If you have multiple Docker repositories enabled, installing or updating without specifying a version in the yum install or yum update command will always install the highest possible version, which may not be appropriate for your stability needs. On production systems, you should install a specific version of Docker CE instead of always using the latest. List the available versions. This example uses the sort -r command to sort the results by version number, highest to lowest, and is truncated. Note: This yum list command only shows binary packages. To show source packages as well, omit the .x86_64 from the package name. 123$ yum list docker-ce.x86_64 --showduplicates | sort -rdocker-ce.x86_64 17.06.0.el7 docker-ce-stable The contents of the list depend upon which repositories are enabled, and will be specific to your version of CentOS (indicated by the .el7 suffix on the version, in this example). Choose a specific version to install. The second column is the version string. The third column is the repository name, which indicates which repository the package is from and by extension its stability level. To install a specific version, append the version string to the package name and separate them by a hyphen (-):1$ sudo yum install docker-ce-&lt;VERSION&gt; Start Docker. 1$ sudo systemctl start docker Verify that docker is installed correctly by running the hello-world image. 1$ sudo docker run hello-world This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits. Upgrade Docker CE To upgrade Docker CE, first run sudo yum makecache fast, then follow the installation instructions, choosing the new version you want to install. Install from a packageIf you cannot use Docker’s repository to install Docker, you can download the .rpm file for your release and install it manually. You will need to download a new file each time you want to upgrade Docker. Go to https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ and download the .rpm file for the Docker version you want to install. Note: To install an edge package, change the word stable in the &gt; URL to edge. Install Docker CE, changing the path below to the path where you downloaded the Docker package. 1$ sudo yum install /path/to/package.rpm Start Docker. 1$ sudo systemctl start docker Verify that docker is installed correctly by running the hello-world image. 1$ sudo docker run hello-world Install using the convenience scriptreference https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-using-the-convenience-script Uninstall Docker CE Uninstall the Docker package: 1$ sudo yum remove docker-ce Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes: 1$ sudo rm -rf /var/lib/docker You must delete any edited configuration files manually.]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github学习]]></title>
    <url>%2Fposts%2F2017%2F10%2F02%2Fgithub%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[##1. 为github帐号添加SSH keys使用git clone命令从github上同步github上的代码库时，如果使用SSH链接（如我自己的beagleOS项 目：git@github.com:DamonDeng/beagleOS.git），而你的SSH key没有添加到github帐号设置中，系统会报下面的错误：12Permission denied (publickey).fatal: The remote end hung up unexpectedly 这时需要在本地创建SSH key，然后将生成的SSH key文件内容添加到github帐号上去。创建SSH key的方法很简单，执行如下命令就可以：ssh-keygen然后系统提示输入文件保存位置等信息，连续敲三次回车即可，生成的SSH key文件保存在中～/.ssh/id_rsa.pub 然后用文本编辑工具打开该文件，我用的是vim,所以命令是：vim ~/.ssh/id_rsa.pub 接着拷贝.ssh/id_rsa.pub文件内的所以内容，将它粘帖到github帐号管理中的添加SSH key界面中。打开github帐号管理中的添加SSH key界面的步骤如下： 登录github 点击右上方的Accounting settings图标 选择 SSH key 点击 Add SSH key在出现的界面中填写SSH key的名称，填一个你自己喜欢的名称即可，然后将上面拷贝的~/.ssh/id_rsa.pub文件内容粘帖到key一栏，在点击“add key”按钮就可以了。添加过程github会提示你输入一次你的github密码 添加完成后再次执行git clone就可以成功克隆github上的代码库了。 来源： http://blog.csdn.net/keyboardota/article/details/7603630 ##2. 布拉布拉]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下任务调度crond笔记]]></title>
    <url>%2Fposts%2F2017%2F10%2F01%2FLinux%E4%B8%8B%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6crond%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装1yum install -y vixie-cron crond 添加调度计划调度表达式介绍12345678# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 栗子：1234* * * * * /bin/bash /home/crontab.sh #每分钟执行/home/crontab.sh0 * * * * /bin/bash /home/crontab.sh #每小时执行/home/crontab.sh0 0 * * * /bin/bash /home/crontab.sh #每天凌晨执行/home/crontab.sh*/2 * * * * /bin/bash /home/crontab.sh #每两分钟执行/home/crontab.sh 表达式最小支持分钟，如果想按照秒执行呢？12345step=5 #间隔的秒数for (( i = 0; i &lt; 60; i=(i+step) )); do restartShutdownTomcat sleep $step done 脚本里通过for循环，能够按秒执行。 如果60不能整除间隔的秒数，则需要调整执行的时间。例如需要每7秒执行一次，就需要找到7与60的最小公倍数，7与60的最小公倍数是420（即7分钟）。则crontab.sh中step的值为7，循环结束条件i&lt;420， crontab -e可以输入以下语句来实现1*/7 * * * * /home/crontab.sh 添加调度计划 一种是直接编辑，执行crontab -e，然后输入调度表达式 另一种是编辑文件，然后执行crontab absolutePath，我使用是这种 注意：使用编辑文件方式添加会覆盖原来的crontab任务 crond不执行原因分析：1. 没有使用绝对路径包括crond命令和脚本 2. crontab不提供所执行用户的环境变量解决方法：在脚本中加入下面这一行： 1. /etc/profile 或者导入环境变量(例如Java环境)：1export JAVA_HOME=/usr/local/java 3. 脚本没有可执行权限在crontab中建议使用 sh 或 bash 来执行shell脚本，避免因脚本文件的执行权限丢失导致任务失败。 4. 放大招：查看日志1tail /var/log/cron]]></content>
      <categories>
        <category>linux</category>
        <category>crond</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>crond</tag>
      </tags>
  </entry>
</search>
